{"version":3,"sources":["logo.svg","components/Jumbotron/Jumbotron.js","components/Footer/Footer.js","components/Game-Cards/game-cards.js","components/Navbar/Navbar.js","components/Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Jumbotron","className","src","alt","Footer","card","props","onClick","shuffle","handleIncrement","id","image","Navbar","prop","count","App","state","cards","clickedImg","newCards","setState","sort","change","Math","random","indexOf","this","map","key","React","Component","Cards","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kiDAAAA,EAAOC,QAAU,IAA0B,kC,oFCgB5BC,MAbf,WACE,OAEF,yBAAKC,UAAU,UACb,yBAAKA,UAAU,WAAWC,IAAI,kIAAkIC,IAAI,eACpK,yBAAKF,UAAU,oBACb,wBAAIA,UAAU,cAAd,eACA,uBAAGA,UAAU,aAAb,+E,MCIWG,MAXf,WACE,OACF,6BACE,yBAAKH,UAAU,aACX,wD,yCCaSI,MAff,SAAcC,GACV,OACA,yBAAKL,UAAU,+BACX,yBAAKA,UAAU,OAAOM,QAAS,WAC3BD,EAAME,UACNF,EAAMG,gBAAgBH,EAAMI,MAE5B,yBAAKT,UAAU,iBACX,yBAAKC,IAAKI,EAAMK,Y,aCAjBC,MAVf,SAAgBC,GACd,OACA,yBAAKZ,UAAU,oBACT,iDACA,wBAAIA,UAAU,SAAd,4BACA,qCAAWY,EAAKC,SCqEPC,E,4MAnEbC,MAAQ,CACNF,MAAO,EACPG,MAAO,GACPC,WAAY,I,EASdV,QAAU,WACR,IAAMW,EAAW,EAAKH,MAAMC,MAC5B,EAAKG,SAAS,CACZH,MAAOE,EAASE,MAAK,SAAAhB,GACnB,IAAMiB,EAASC,KAAKC,SAEpB,OAAIF,EAAS,GACJ,EAELA,EAAS,IACH,EAGH,Q,EAKbb,gBAAkB,SAACJ,IAC4B,IAAzC,EAAKW,MAAME,WAAWO,QAAQpB,GAClC,EAAKe,SAAS,CACZN,MAAO,EAAKE,MAAMF,MAAQ,EAC1BI,WAAW,GAAD,mBAAM,EAAKF,MAAME,YAAjB,CAA6Bb,MAIvC,EAAKe,SAAS,CAAEN,MAAO,K,kEA7BxBY,KAAKN,SAAS,CAAEH,Y,+BAkCR,IAAD,OACR,OACE,6BACE,kBAAE,EAAF,CACEH,MAAOY,KAAKV,MAAMF,QAEpB,yBAAKb,UAAU,OACZgB,EAAMU,KAAI,SAAAtB,GAAI,OACb,kBAAC,EAAD,CACEuB,IAAKvB,EAAKK,GACVC,MAAON,EAAKM,MACZH,QAAS,EAAKA,QACdC,gBAAiB,EAAKA,gBACtBC,GAAIL,EAAKK,c,GA1DPmB,IAAMC,W,MCWTf,MAVf,WACE,OACE,yBAAKd,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC8B,EAAD,MACA,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27e1d0da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Jumbotron.css\"\n\nfunction Jumbotron() {\n  return (\n\n<div className=\"header\">\n  <img className=\"card-img\" src=\"https://www.mobius.photography/wp-content/uploads/2018/06/DSC6113-Edit-Orange-layers-of-light-san-rafael-swell-Utah-sunrise.jpg\" alt=\"Card image\" />\n  <div className=\"card-img-overlay\">\n    <h1 className=\"card-title\">Clicky Game</h1>\n    <p className=\"card-text\">Click on an image to earn points, but don't click on any more than once!</p>\n  </div>\n</div>\n  );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./Footer.css\"\n\nfunction Footer() {\n  return (\n<div>\n  <div className=\"card-body\">\n      <footer>Gecko Memory Game</footer>\n  </div>\n</div>\n\n  );\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction card(props) {\n    return (\n    <div className=\"col-sm-12 col-md-4 col-lg-3\">\n        <div className=\"card\" onClick={function(){\n            props.shuffle();\n            props.handleIncrement(props.id);\n        }}>\n            <div className=\"img-container\">\n                <img src={props.image}/>\n            </div>\n        </div>\n    </div>\n    );\n};\n\nexport default card;","import React from \"react\";\nimport \"./Navbar.css\"\n\nfunction Navbar(prop) {\n  return (\n  <nav className=\"navbar fixed-top\">\n        <h2>Gecko Memory Game</h2>\n        <h2 className=\"begin\">Click an Image to Begin!</h2>\n        <h2>Score:{prop.count}</h2>\n  </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport GameCards from '../Game-Cards/game-cards';\nimport cards from '../../card.json';\nimport Navbar from \"../Navbar/Navbar\";\n\n\n\n\nclass App extends React.Component {\n\n    state = {\n      count: 0,\n      cards: [],\n      clickedImg: []\n    };\n  \n  \n    componentDidMount()\n     {\n       this.setState({ cards });\n     }\n  \n    shuffle = () => {\n      const newCards = this.state.cards;\n      this.setState({\n        cards: newCards.sort(card => {\n          const change = Math.random();\n  \n          if (change > .5) {\n            return 1;\n          }\n          if (change < .5) {\n            return -1;\n          }\n  \n          return 0;\n        })\n      })\n    }\n\n    handleIncrement = (card) => {\n      if (this.state.clickedImg.indexOf(card) === -1) {\n      this.setState({\n        count: this.state.count + 1,\n        clickedImg: [...this.state.clickedImg, card]\n      }) \n      \n      }else {\n        this.setState({ count: 0 }) } \n      }\n\n    \n  \n      render(){\n      return (\n        <div>\n          < Navbar \n            count={this.state.count}\n            />\n          <div className=\"row\">\n            {cards.map(card => (\n              <GameCards\n                key={card.id}\n                image={card.image}\n                shuffle={this.shuffle}\n                handleIncrement={this.handleIncrement}\n                id={card.id}\n                />\n            ))}\n          </div>\n        </div>        \n  \n      )\n    }\n  }\n  \n  \n  export default App;\n  \n  \n  ","import React from 'react';\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport Footer from \"./components/Footer/Footer\";\nimport Cards from \"./components/Cards/Cards\"\nimport logo from './logo.svg';\nimport './App';\n\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Jumbotron />\n      <Cards />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}